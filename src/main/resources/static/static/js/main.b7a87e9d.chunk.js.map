{"version":3,"sources":["components/SyncingEditor.tsx","components/Table.tsx","components/Home.tsx","components/PrivateRoute.tsx","components/Login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["stateID","ID","Date","now","console","log","effectsRelation","Map","historyBuffer","toSendBuffer","concurrentChanges","received","SyncingEditor","socket","useRef","SockJS","stompClient","Stomp","current","editor","useMemo","withReact","createEditor","remote","sending","useState","type","children","text","value","setValue","onReceived","op","siteID","tempOp","offset","i","length","copy","inclusionTransform","splice","forEach","operation","index","apply","push","sendCharacter","setTimeout","send","JSON","stringify","useEffect","connected","connect","id","window","location","href","split","pop","subscribe","data","response","parse","body","Number","state","onChange","newValue","operations","filter","o","onKeyDown","event","onClick","o1","o2","relationship","o1Key","o2Key","get","set","get_ER_IT","newOp1","useStyles","makeStyles","table","minWidth","rows","BasicTable","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","to","name","owner","last_modified","file_size","Home","cookies","Cookies","setData","axios","headers","then","PrivateRoute","Component","rest","authed","render","props","pathname","from","App","onSubmit","e","preventDefault","user","username","document","getElementById","password","post","maxAge","replace","catch","error","status","submitData","htmlFor","placeholder","required","path","exact","Login","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.b7a87e9d.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { createEditor, InsertTextOperation, Operation } from 'slate'\r\nimport { Slate, Editable, withReact } from 'slate-react'\r\n\r\nimport * as Stomp from \"stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { RemoveTextOperation } from 'slate';\r\ninterface Props { }\r\n\r\n\r\ninterface OperationKey {\r\n    siteID: number,\r\n    stateID: number\r\n}\r\n\r\ntype Identifier = {\r\n    siteID: number,\r\n    stateID: number\r\n}\r\n\r\n\r\ntype CustomOperation = (InsertTextOperation | RemoveTextOperation) & Identifier;\r\n\r\n\r\n//TODO: Put inside of component\r\nlet stateID: number = 0.0;\r\n//TODO: get ID from the back, also UUID\r\nconst ID = Date.now();\r\nconsole.log(ID);\r\n\r\nlet effectsRelation = new Map<OperationKey, OperationKey>();\r\n\r\nlet historyBuffer: CustomOperation[] = []; // List of changes that have been recorded, potentially useful for ETSOS\r\nlet toSendBuffer: CustomOperation[] = []; // List of changes TO BE SENT, constantly altered by changes before ACK\r\nlet concurrentChanges: CustomOperation[] = []; //List of changes to be sent, unaltered by changes before ACK, used for transformation\r\n\r\nlet received: CustomOperation[] = [];\r\nexport const SyncingEditor: React.FC<Props> = () => {\r\n\r\n    const socket = useRef(new SockJS('http://127.0.0.1:8080/collab-editor'))\r\n    const stompClient = useRef(Stomp.over(socket.current));\r\n\r\n    const editor = useMemo(() => withReact(createEditor()), [])\r\n\r\n    //const [historyBuffer, setHistoryBuffer] = useState([] as CustomOperation[]);\r\n\r\n    const remote = useRef(false);\r\n    const sending = useRef(false);\r\n    // Add the initial value when setting up our state.\r\n    const [value, setValue] = useState([\r\n        {\r\n            type: 'paragraph',\r\n            children: [{ text: '' }],\r\n        },\r\n    ])\r\n\r\n    useEffect(() => {\r\n        if (!stompClient.current.connected) {\r\n            stompClient.current.connect({}, function () {\r\n                let id = window.location.href.split('/').pop();\r\n                stompClient.current.subscribe('/app/file/'+id, function (data: Stomp.Message) {\r\n                    let response = JSON.parse(data.body).body;\r\n\r\n                    setValue([\r\n                        {\r\n                            type: 'paragraph',\r\n                            children: [{ text: response.text }]\r\n                        },\r\n                    ]);\r\n                    stateID = Number(response.state);\r\n                });\r\n\r\n                stompClient.current.subscribe('/topic/1', function (data: any) {\r\n                    let op: CustomOperation = JSON.parse(data.body);\r\n                    onReceived(op);\r\n                    received.push(op);\r\n                });\r\n\r\n            })\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    function onReceived(op: CustomOperation) {\r\n        if (op.siteID !== ID) {\r\n            console.log(\"Remote execution of: character:\" + op.text + \" | offset:\" + op.offset + \" | stateID: \" + op.stateID);\r\n            let tempOp: CustomOperation;\r\n\r\n            //If it's below 0, useless operation\r\n            if (op.offset >= 0) {\r\n                for (let i = 0; i < toSendBuffer.length; i++) {\r\n                    tempOp = copy(op);\r\n                    op = inclusionTransform(op, toSendBuffer[i]);\r\n                    if (op.offset === -1) {\r\n                        toSendBuffer.splice(i, 1);\r\n                        break;\r\n                    }\r\n                    toSendBuffer[i] = inclusionTransform(toSendBuffer[i], tempOp);\r\n\r\n                }\r\n            }\r\n\r\n            toSendBuffer.forEach((operation, index) => {\r\n                toSendBuffer[index].stateID++;\r\n            })\r\n            \r\n            if (op.offset >= 0) {\r\n                remote.current = true;\r\n\r\n                editor.apply(op);\r\n                historyBuffer.push(op)\r\n                //setHistoryBuffer(hb => [...hb, op]);\r\n                remote.current = false;\r\n                stateID++;\r\n                console.log(\"Remote execution of: character:\" + op.text + \" | offset:\" + op.offset + \" | stateID: \" + op.stateID);\r\n            }\r\n        } else {\r\n            //Ack received\r\n            toSendBuffer.forEach((operation, index) => {\r\n                toSendBuffer[index].stateID++;\r\n            })\r\n            toSendBuffer.splice(0, 1);\r\n            concurrentChanges.splice(0, 1);\r\n            sending.current = false;\r\n            if (toSendBuffer.length > 0) {\r\n                sendCharacter(toSendBuffer[0] as CustomOperation)\r\n            }\r\n            stateID++;\r\n            historyBuffer.push(op);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(value[0].children[0].text);\r\n    }, [value])\r\n\r\n    function sendCharacter(operation: Operation) {\r\n        //stompClient.send(\"/app/sendcharacter\", {}, JSON.stringify({type: operation.type, character: operation.text, index: operation.offset, id: ID, stateID: stateID}));\r\n        if (!sending.current) {\r\n            sending.current = true;\r\n\r\n            setTimeout(() => {\r\n                stompClient.current.send(\"/app/sendcharacter\", {}, JSON.stringify(operation))\r\n            }, 0); //was setTimeout TODO: remove\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Slate\r\n                editor={editor}\r\n                value={value}\r\n                onChange={newValue => {\r\n                    setValue(newValue as any);\r\n\r\n                    // const ops = newValue.operations.filter()\r\n                    const ops = editor.operations.filter(o => {\r\n                        if (o) { //not undefined\r\n                            return (\r\n                                o.type === \"remove_text\" ||\r\n                                o.type === \"insert_text\"\r\n                            );\r\n                        }\r\n                        return false;\r\n                    })//.map((o) => ({ ...o, data: { id: ID, stateID: stateID } })); // instead of one, get some unique identifier\r\n\r\n                    ops.forEach((op) => {\r\n                        if (!op.siteID) {\r\n                            op.siteID = ID;\r\n                            op.stateID = stateID;\r\n                            toSendBuffer.push(op as CustomOperation);\r\n                            concurrentChanges.push(op as CustomOperation);\r\n                            console.log(\"Local change:\" + value[0].children[0].text)\r\n                            console.log(\"offset: \" + op.offset + \"| character: \" + op.text + \"| stateID: \" + op.stateID)\r\n                            //TODO: uncomment\r\n                            sendCharacter(op);\r\n                        }\r\n\r\n                    });\r\n                }}\r\n            >\r\n                <Editable\r\n                    onKeyDown={event => {\r\n\r\n                    }} />\r\n            </Slate>\r\n            <button onClick={() => {\r\n                if (toSendBuffer.length > 0)\r\n                    sendCharacter(toSendBuffer[0] as CustomOperation)\r\n            }\r\n            }>Send</button>\r\n            <button onClick={() => {\r\n                if (received.length > 0)\r\n                    onReceived(received.splice(0, 1)[0])\r\n            }}>Receive</button>\r\n        </div>\r\n    )\r\n\r\n\r\n    function inclusionTransform(o1: CustomOperation, o2: CustomOperation) {\r\n        /*-1 = O1 is to the left of O2, so don't transform\r\n         * 0 = Same position, used for double deletions\r\n         * 1 = O1 is to the right of O2, transform*/\r\n\r\n        //TODO: Uncomment\r\n        let relationship: number = get_ER_IT(o1, o2);\r\n\r\n        // Clone o1 into newOp1 so we can modify newOp1 without affecting o1\r\n        let newOp1: CustomOperation = copy(o1);\r\n\r\n        if (relationship === 0) { // Same position, double deletion\r\n            newOp1.offset = -1;// position = -1 -> Don't delete, identity operation\r\n        } else {\r\n            if (relationship === 1) { // o2 is to the left of o1\r\n                if (o2.type === \"insert_text\") {// ins = insertion operator\r\n                    newOp1.offset++; // position++\r\n                } else { // o2.type = deletion\r\n                    newOp1.offset--;// position--\r\n                }\r\n            }\r\n        }\r\n        return newOp1;\r\n    }\r\n\r\n    function get_ER_IT(o1: CustomOperation, o2: CustomOperation) {\r\n\r\n        // Check if there is a mapping of o1->o2 or o2->o1\r\n        let o1Key = { siteID: o1.siteID as number, stateID: o1.stateID as number };\r\n        let o2Key = { siteID: o2.siteID as number, stateID: o2.stateID as number };\r\n        if (effectsRelation.get(o1Key) === o2Key) {\r\n            return -1;\r\n        }\r\n        if (effectsRelation.get(o2Key) === o1Key) {\r\n            return 1;\r\n        }\r\n\r\n        let relationship = 1;\r\n\r\n        // If no existing relationship, create a new one\r\n        if (o1.offset < o2.offset) {\r\n            relationship = -1; // I.e. don't transform\r\n            effectsRelation.set(o1Key, o2Key);\r\n        } else if (o1.offset === o2.offset) {\r\n            // If two insertions, arbitrarily choose by site id, don't transform\r\n            if (o1.type === \"insert_text\" && o2.type === \"insert_text\" && o1.siteID < o2.siteID) {\r\n                relationship = -1;\r\n                effectsRelation.set(o1Key, o2Key);\r\n            } else if (o1.type === \"remove_text\" && o2.type === \"remove_text\") {\r\n                relationship = 0; // Delete only once\r\n            } else if (o1.type === \"insert_text\" && o2.type === \"remove_text\") {\r\n                relationship = -1;\r\n                effectsRelation.set(o1Key, o2Key);\r\n            }\r\n        }\r\n        return relationship;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  /*\r\n    TRANSFORMATION FUNCTIONS\r\n    MAYBE I PUT THESE IN ANOTHER FILE\r\n    MAYBE I DON'T\r\n    WILL SEE\r\n    */\r\n\r\n\r\n    //TODO: Re-evaluate the need for happened, etsoshappened etc.\r\n    // function integrate(op: CustomOperation, happened: CustomOperation[], concurrent: CustomOperation[]) {\r\n    //     // Normally this should be a clear split anyway but it also contextually\r\n    //     // serializes if needed\r\n    //     // Will have to rethink the necessity of the serial contextualization but it\r\n    //     // doesn't hurt the performance much\r\n\r\n\r\n    //     //for now, gonna comment these, TODO: revisir\r\n    //     // let transposedLists = transposePreCon(op, sequence);\r\n    //     // let happened: CustomOperation[] = transposedLists[0];\r\n    //     // let concurrent: CustomOperation[] = transposedLists[1];\r\n\r\n\r\n    //     let newOp: CustomOperation;\r\n\r\n    //     // If no concurrent operations, just return and dont transform\r\n    //     if (concurrent.length === 0) {\r\n\r\n    //         newOp = copy(op);\r\n    //         return newOp;\r\n    //     }\r\n\r\n    //     if (op.type === \"remove_text\") {\r\n    //         newOp = it_sq(op, concurrent);\r\n    //         return newOp;\r\n    //     } else { // op.type == \"ins\"\r\n\r\n    //         // fixed list\r\n    //         let etsos_happened: CustomOperation[] = buildETSOS(happened);\r\n\r\n    //         // insertions and deletions that have happened\r\n    //         let insDelLists = transposeInsDel(etsos_happened);\r\n    //         // ArrayList<Operation> happenedInsert = insDelLists.get(0);\r\n    //         let happenedDelete: CustomOperation[] = insDelLists[1];\r\n\r\n    //         // all deletions that have happened and concurrent operations\r\n    //         let newList: CustomOperation[] = happenedDelete.concat(concurrent);\r\n    //         let happenedDelConc: CustomOperation[] = buildETSOS(newList);\r\n\r\n    //         // All insertions and deletions\r\n    //         let insDels = transposeInsDel(happenedDelConc);\r\n    //         let insertions: CustomOperation[] = insDels[0];\r\n    //         //console.log(insertions.join());\r\n    //         let deletions: CustomOperation[] = insDels[1];\r\n    //         //console.log(deletions.join())\r\n\r\n    //         let innerOp: CustomOperation = et_sq(op, happenedDelete); // o'', this is the back backwards\r\n\r\n    //         let allInsDels: CustomOperation[] = insertions.concat(deletions);\r\n    //         newOp = it_sq(innerOp, allInsDels);\r\n    //         return newOp;\r\n    //     }\r\n    // }\r\n\r\n\r\n    // function exclusionTransform(o2: CustomOperation, o1: CustomOperation) {\r\n    //     let relationship: number = get_ER_ET(o1, o2);\r\n    //     let newOp2: CustomOperation = copy(o2);\r\n    //     if (relationship === 0) {\r\n    //         newOp2.offset = -1;\r\n    //         // throw new Exception(\"HALT, DOUBLE DELETION\");\r\n    //     } else {\r\n    //         newOp2 = copy(o2);\r\n\r\n    //         if (relationship < -1) {// o1 precedes o2 so transform o2\r\n    //             if (o1.type === \"insert_text\") {\r\n    //                 newOp2.offset--; // Shift index to the left by 1\r\n    //             } else { // o1.type = deletion\r\n    //                 newOp2.offset++;// Shift index to the right by 1\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return newOp2;\r\n    // }\r\n\r\n    // function get_ER_ET(o1: CustomOperation, o2: CustomOperation) {\r\n    //     let o1Key = { siteID: o1.siteID as number, stateID: o1.stateID as number };\r\n    //     let o2Key = { siteID: o2.siteID as number, stateID: o2.stateID as number };\r\n    //     if (effectsRelation.get(o1Key) === o2Key) {\r\n    //         return -1;\r\n    //     }\r\n    //     if (effectsRelation.get(o2Key) === o1Key) {\r\n    //         return 1;\r\n    //     }\r\n\r\n    //     let relationship: number;\r\n\r\n    //     if (o1.offset < o2.offset) {\r\n    //         relationship = -1;\r\n    //     } else if (o1.offset > o2.offset) {\r\n    //         relationship = 1;\r\n    //     } else { // o1.pos == o2.pos\r\n    //         if (o1.type === \"insert_text\" && o2.type === \"insert_text\") {\r\n    //             relationship = 1;\r\n    //         } else if (o1.type === \"remove_text\" && o2.type === \"remove_text\") {\r\n    //             relationship = -1;\r\n    //         } else if (o1.type === \"remove_text\" && o2.type === \"insert_text\") {\r\n    //             relationship = 1;\r\n    //         } else { // o1.type = ins, o2.type = del\r\n    //             relationship = 0;\r\n    //         }\r\n    //     }\r\n\r\n    //     // record in ER\r\n    //     switch (relationship) {\r\n    //         case -1:\r\n    //             effectsRelation.set(o1Key, o2Key);\r\n    //             break;\r\n    //         case 1:\r\n    //             effectsRelation.set(o2Key, o1Key);\r\n    //             break;\r\n    //     }\r\n\r\n    //     return relationship;\r\n    // }\r\n\r\n    // /*\r\n    //  * Precondition: Sequence must be IT-safe (i.e. all insertion operations should\r\n    //  * be before deletion operations\r\n    //  */\r\n    // function it_sq(op: CustomOperation, sequence: CustomOperation[]) {\r\n    //     let newOp: CustomOperation = copy(op); // Copy the object\r\n    //     for (let i = 0; i < sequence.length; i++) {\r\n    //         newOp = inclusionTransform(newOp, sequence[i]);\r\n    //         if (newOp.offset < 0) { //identity operation\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    //     return newOp;\r\n    // }\r\n\r\n\r\n    // /*\r\n    //  * Precondition: Sequence must be ET-safe (i.e. for any two i,j where i<j,\r\n    //  * either pos(i)<pos(j) or pos(i)=pos(j) but j deletes i's insertion\r\n    //  */\r\n    // function et_sq(op: CustomOperation, sequence: CustomOperation[]) {\r\n    //     let newOp: CustomOperation = copy(op); // Copy the object\r\n    //     let i = 0;\r\n\r\n    //     // Since our array is sorted by Effects Relation, this first for-loop removes\r\n    //     // all characters\r\n    //     // which do not affect op because they are on the right of it. Possible\r\n    //     // optimisation by not calling ET?\r\n    //     // Double check in get_er_et?\r\n    //     for (i = sequence.length - 1; i >= 0; i--) {\r\n    //         newOp = exclusionTransform(newOp, sequence[i]);\r\n    //         if (get_ER_ET(sequence[i], newOp) === -1) {\r\n    //             break;\r\n    //         }\r\n    //     }\r\n\r\n    //     // The remaining elements from the last array do affect op\r\n    //     for (let j = i - 1; j >= 0; i--) {\r\n    //         if (sequence[j].type === \"insert_text\") {\r\n    //             newOp.offset--;\r\n    //         } else {\r\n    //             newOp.offset++;\r\n    //         }\r\n    //     }\r\n    //     return newOp;\r\n    // }\r\n\r\n    // function transpose(o2: CustomOperation, o1: CustomOperation) {\r\n    //     let transposedOperations: CustomOperation[] = [];\r\n\r\n    //     if (get_ER_ET(o1, o2) === 0) {// Same character, don't transpose, return as is\r\n    //         //arr.splice(index, 0, item);\r\n    //         transposedOperations.push(o1)\r\n    //         transposedOperations.push(o2);\r\n    //     } else {\r\n    //         transposedOperations.push(exclusionTransform(o1, o2));\r\n    //         transposedOperations.push(inclusionTransform(o2, transposedOperations[0]));\r\n    //     }\r\n\r\n    //     return transposedOperations;\r\n    // }\r\n\r\n\r\n    // function transposeOSq(sq: CustomOperation[], op: CustomOperation) {\r\n\r\n    //     let newOp = copy(op); // Clone op into newOp\r\n    //     let newSq: CustomOperation[] = [];\r\n\r\n    //     // Clone the sequence\r\n    //     sq.forEach(operation => {\r\n    //         newSq.push(copy(operation));\r\n    //     });\r\n\r\n    //     let transposedElements: CustomOperation[];\r\n    //     for (let i = sq.length - 1; i >= 0; i--) {\r\n    //         transposedElements = transpose(newSq[i], newOp);\r\n    //         newOp = transposedElements[0];\r\n    //         newSq[i] = transposedElements[1];\r\n    //         console.log(\"transposeOSq\");\r\n    //     }\r\n\r\n    //     let response = [newOp, newSq];\r\n    //     return response;\r\n    // }\r\n\r\n    // Given an operation o and a sequence sq, returns the list of all operations\r\n    // that happened before o and the list of all that happened\r\n    // concurrently with o from sq. Currently looks at stateID, might have to\r\n    // revisit TODO\r\n    // function transposePreCon(op: CustomOperation, sq: CustomOperation[]) {\r\n    //     let msg = \"\";\r\n    //     sq.forEach((el) => {\r\n    //         msg += el.stateID + \" | \"\r\n    //     })\r\n    //     console.log(msg)\r\n    //     let happened: CustomOperation[] = [];\r\n    //     let concurrent: CustomOperation[] = [];\r\n    //     let sequences = [];\r\n    //     for (let i = 0; i < sq.length; i++) {\r\n    //         if (sq[i].stateID >= op.stateID) {\r\n    //             concurrent.push(sq[i]);\r\n    //         } else {\r\n    //             let response = transposeOSq(concurrent, sq[i]);\r\n    //             happened.push(response[0]);\r\n    //         }\r\n    //     }\r\n    //     sequences.push(happened);\r\n    //     sequences.push(concurrent);\r\n    //     return sequences;\r\n    // }\r\n\r\n\r\n    // // Given a sequence sq of insertions and deletions, returns a list of insertions\r\n    // // and a list of deletions.\r\n    // // These lists are transposed so that the effects of the initial sequence sq and\r\n    // // the effect of sqi+sqd is the same\r\n    // // Currently looks at stateID, might have to revisit TODO\r\n    // function transposeInsDel(sq: CustomOperation[]) {\r\n    //     let insertions: CustomOperation[] = [];\r\n    //     let deletions: CustomOperation[] = [];\r\n    //     let sequences: any = [];\r\n    //     for (let i = 0; i < sq.length; i++) {\r\n    //         if (sq[i].type === \"remove_text\") {\r\n    //             deletions.push(sq[i]);\r\n    //         } else {\r\n    //             let response = transposeOSq(deletions, sq[i]);\r\n    //             insertions.push(response[0]);\r\n    //         }\r\n    //     }\r\n    //     sequences.push(insertions);\r\n    //     sequences.push(deletions);\r\n    //     return sequences;\r\n    // }\r\n\r\n    // function buildETSOS(sq: CustomOperation[]) {\r\n    //     if (sq.length < 1) {\r\n    //         return sq;\r\n    //     }\r\n    //     let newSq: CustomOperation[] = [];\r\n    //     let op: CustomOperation;\r\n    //     let flag = true;\r\n\r\n    //     newSq.push(sq[0]);\r\n    //     for (let i = 1; i < sq.length; i++) {\r\n    //         op = copy(sq[i]);\r\n    //         flag = false;\r\n    //         for (let j = newSq.length - 1; j >= 0; j--) {\r\n    //             if (flag) {\r\n    //                 let o1Key = { siteID: newSq[j].siteID as number, stateID: newSq[j].stateID as number };\r\n    //                 let o2Key = { siteID: op.siteID as number, stateID: op.stateID as number };\r\n    //                 effectsRelation.set(o1Key, o2Key);\r\n    //             } else {\r\n    //                 if (get_ER_ET(newSq[j], op) === -1) { // if sq[j] is to the left of op\r\n\r\n    //                     // PLEASE TEST THIS\r\n    //                     let temp: CustomOperation[] = [];\r\n    //                     for (let k = 0; k <= j; k++) {\r\n    //                         temp.push(newSq[k]);\r\n    //                     }\r\n    //                     temp.push(op);\r\n    //                     for (let k = j + 1; k <= newSq.length - 1; k++) {\r\n    //                         temp.push(newSq[k]);\r\n    //                     }\r\n    //                     newSq = temp;\r\n\r\n    //                     flag = true;\r\n    //                 } else {\r\n    //                     let transposed: CustomOperation[] = transpose(newSq[j], op);\r\n    //                     op = transposed[0];\r\n    //                     newSq[j] = transposed[1];\r\n    //                 }\r\n    //             }\r\n    //         }\r\n\r\n    //         if (!flag) {\r\n    //             newSq.splice(0, 0, op);\r\n    //         }\r\n    //     }\r\n    //     return newSq;\r\n    // }\r\n\r\n\r\n    function copy(operation: Operation) {\r\n        //Hacky solution to copy an object\r\n        return JSON.parse(JSON.stringify(operation));\r\n    }\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { DocumentQuery } from '../customTypes';\r\nimport {Link} from 'react-router-dom'\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nlet rows: DocumentQuery[] = [\r\n  // createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  // createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  // createData('Eclair', 262, 16.0, 24, 6.0),\r\n  // createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  // createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\ninterface Props {\r\n  data: DocumentQuery[]\r\n}\r\n\r\nexport default function BasicTable({ data }: Props) {\r\n  const classes = useStyles();\r\n  console.log(data.length);\r\n\r\n  console.log(data);\r\n  rows = data ? data : [];\r\n\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"right\">Name</TableCell>\r\n            <TableCell align=\"right\">Owner</TableCell>\r\n            <TableCell align=\"right\">Last Modified</TableCell>\r\n            <TableCell align=\"right\">File Size</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row: DocumentQuery, index) => (\r\n            \r\n              <TableRow key={row.name + index}>\r\n                \r\n                {/* <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell> */}\r\n                <TableCell align=\"right\"><Link to={\"/doc/\"+row.id}>{row.name} </Link></TableCell>\r\n                <TableCell align=\"right\">{row.owner}</TableCell>\r\n                <TableCell align=\"right\">{row.last_modified}</TableCell>\r\n                <TableCell align=\"right\">{row.file_size}</TableCell>\r\n                \r\n              </TableRow>\r\n            \r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport Table from './Table';\r\nimport {DocumentQuery} from '../customTypes'\r\nimport {Cookies} from 'react-cookie'\r\nconst Home = () => {\r\n    const cookies = new Cookies();\r\n    // const [documents, setDocuments] = useState([]);\r\n    const [data, setData] = useState<DocumentQuery[]>([]);\r\n    useEffect(()=>{\r\n        axios.get('http://localhost:8080/api/doc', {headers:{\"Authorization\":cookies.get(\"auth\")}}).then((response)=>showData(response));\r\n    },[])\r\n   \r\n    function showData( table:AxiosResponse ){\r\n        setData(table.data);\r\n        //console.log(fromJson[0]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            DOCUMENTS\r\n            <Table data={data} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {Cookies} from 'react-cookie';\r\ninterface Props{\r\n  component:any,\r\n  path:string,\r\n  exact?:boolean\r\n}\r\nexport default function PrivateRoute({component: Component, ...rest} : Props) {\r\n  const cookies = new Cookies();\r\n  let authed = cookies.get(\"auth\") ? true : false; //cookies.get(\"auth\") === \"true\";// ? true : false;  \r\n  // console.log(typeof cookies.get(\"auth\"));\r\n  // console.log(authed);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => authed === true\r\n        ? <Component />\r\n        : <Redirect to={{pathname: '/login', state: {from: props.location}}} />}\r\n    />\r\n  )\r\n}","import axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../style.css'\r\n// import { useEffect, useState } from 'react';\r\n// import { Redirect } from 'react-router';\r\nimport {Cookies} from 'react-cookie';\r\nconst App = () => {\r\n    const cookies = new Cookies();\r\n    // axios.post('http://localhost:8080/login', user, {\r\n    //     headers: {\r\n    //         'Content-Type': 'form-data',\r\n    //     }, auth: user\r\n    // }).then((response) => { console.log(response); setData(response.data) });\r\n    // useEffect(()=>{\r\n    //     let bodyFormData = new FormData();\r\n    //     bodyFormData.append(\"username\",\"rag@gmail.com\");\r\n    //     bodyFormData.append(\"password\",\"password\");\r\n\r\n    //     axios({\r\n    //         method: \"post\",\r\n    //         url: 'http://localhost:8080/login',\r\n    //         data: bodyFormData,\r\n    //         headers: {\"Content-Type\": \"multipart/form-data\"}\r\n    //     }).then((response)=>{\r\n    //         console.log(response)\r\n    //     });\r\n    // })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n                <form className=\"form-signin\" onSubmit={(e) => { e.preventDefault(); submitData() }} >\r\n\r\n                    <h2 className=\"form-signin-heading\">Please sign in</h2>\r\n\r\n                    <p>\r\n                        <label htmlFor=\"username\" className=\"sr-only\">Username</label>\r\n                        <input type=\"text\" id=\"username\" name=\"username\" className=\"form-control\" placeholder=\"Username\" required />\r\n                    </p>\r\n\r\n                    <p>\r\n                        <label htmlFor=\"password\" className=\"sr-only\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\" placeholder=\"Password\" required />\r\n                    </p>\r\n\r\n                    <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\r\n\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n    function submitData() {\r\n        let user = {\r\n            username : (document.getElementById(\"username\") as HTMLInputElement).value,\r\n            password : (document.getElementById(\"password\") as HTMLInputElement).value\r\n        }\r\n        \r\n        axios.post(\"http://localhost:8080/login\", user).then((response) => {\r\n                console.log(\"auth success\")\r\n                console.log(response);\r\n                cookies.set('auth', response.data,{maxAge:30*60});//mins*seconds\r\n                window.location.replace('/')\r\n            }).catch((error)=>{\r\n                //console.log(error.response.status) // 401\r\n                // console.log(error.response.data.error) //Please Authenticate or whatever returned from server\r\n                if(error.response.status===401){\r\n                    //redirect to login\r\n                    console.log(\"redirect to login with bad creds\")\r\n                }\r\n            });\r\n        // axios({\r\n        //     method: \"post\",\r\n        //     url: 'http://localhost:8080/login',\r\n        //     data: bodyFormData,\r\n        //     headers: { \"Content-Type\": \"multipart/form-data\" }\r\n        // }).then((response) => {\r\n        //     console.log(\"auth success\")\r\n        //     console.log(response);\r\n        //     //cookies.set('auth', true,{maxAge:30*60});//mins*seconds\r\n        //     //window.location.replace('/')\r\n        // }).catch((error)=>{\r\n        //     //console.log(error.response.status) // 401\r\n        //     // console.log(error.response.data.error) //Please Authenticate or whatever returned from server\r\n        //     if(error.response.status===401){\r\n        //         //redirect to login\r\n        //         console.log(\"redirect to login with bad creds\")\r\n        //     }\r\n        // });\r\n    }\r\n}\r\n\r\n\r\nexport default App;","import React, { useState } from 'react'\nimport { SyncingEditor } from './components/SyncingEditor'\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Home from './components/Home'\nimport PrivateRoute from './components/PrivateRoute';\nimport Login from './components/Login';\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        \n        <PrivateRoute path='/' exact component={Home} />\n        <Route path = '/login' component={Login}/>\n        <PrivateRoute path='/doc' component={SyncingEditor} />\n        <Route render={() => <Redirect to={{pathname: \"/login\"}} />} />\n      </Switch>\n\n    </Router>\n  )\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
[{"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Table.tsx":"1","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\App.tsx":"2","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\PrivateRoute.tsx":"3","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Login.tsx":"4","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\index.tsx":"5","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\SyncingEditor.tsx":"6","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Home.tsx":"7","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Form.tsx":"8","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\FormDialog.tsx":"9","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\ConfirmDialog.tsx":"10","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Components.tsx":"11","F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\RichText.tsx":"12"},{"size":3330,"mtime":1616251492601,"results":"13","hashOfConfig":"14"},{"size":921,"mtime":1616924668918,"results":"15","hashOfConfig":"14"},{"size":690,"mtime":1615724447042,"results":"16","hashOfConfig":"14"},{"size":3083,"mtime":1615819344016,"results":"17","hashOfConfig":"14"},{"size":619,"mtime":1615822531288,"results":"18","hashOfConfig":"14"},{"size":29320,"mtime":1618582758899,"results":"19","hashOfConfig":"14"},{"size":2807,"mtime":1618582741998,"results":"20","hashOfConfig":"14"},{"size":1408,"mtime":1615727544282,"results":"21","hashOfConfig":"14"},{"size":2886,"mtime":1618481112157,"results":"22","hashOfConfig":"14"},{"size":2248,"mtime":1615811607556,"results":"23","hashOfConfig":"14"},{"size":3908,"mtime":1616924558343,"results":"24","hashOfConfig":"14"},{"size":11402,"mtime":1618487155855,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"w3mwro",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Table.tsx",["53"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { DocumentQuery } from '../customTypes';\r\nimport { Link } from 'react-router-dom'\r\nimport { faTrash, faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FormDialog from './FormDialog';\r\nimport ConfirmDialog from './ConfirmDialog';\r\n// import axios from 'axios';\r\n// import { Cookies } from 'react-cookie'\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nlet rows: DocumentQuery[] = [\r\n  // createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  // createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  // createData('Eclair', 262, 16.0, 24, 6.0),\r\n  // createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  // createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\ninterface Props {\r\n  data: DocumentQuery[],\r\n  deleteFunction: Function,\r\n  addEditorFunction: Function\r\n}\r\n\r\nexport default function BasicTable({ data, deleteFunction, addEditorFunction }: Props) {\r\n  const classes = useStyles();\r\n\r\n  // const cookies = new Cookies();\r\n  rows = data ? data : [];\r\n\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"left\">Name</TableCell>\r\n            <TableCell align=\"left\">Owner</TableCell>\r\n            <TableCell align=\"left\">Last Modified</TableCell>\r\n            <TableCell align=\"left\">Actions</TableCell>\r\n            {/* <TableCell align=\"right\">File Size</TableCell> */}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row: DocumentQuery, index) => (\r\n\r\n            <TableRow key={row.name + index}>\r\n\r\n              {/* <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell> */}\r\n              <TableCell align=\"left\"><Link to={\"/doc/\" + row.id}>{row.name} </Link></TableCell>\r\n              <TableCell align=\"left\">{row.owner}</TableCell>\r\n              <TableCell align=\"left\">{row.lastModified}</TableCell>\r\n              <TableCell align=\"left\">\r\n                {/* <FontAwesomeIcon icon={faTrash} onClick={() => deleteFunction(row.id)}\r\n                  style={{ cursor: \"pointer\", color: \"red\" }} /> */}\r\n\r\n\r\n                <ConfirmDialog dialogContextText ={\"Are you sure you want to delete this file?\"} faButton={faTrash} onSubmitFunction={() => deleteFunction(row.id)}/>\r\n                {/* FORM DIALOG WITH AN FA BUTTON IN IT, THAT WHEN CLICKED AND SUBMITTED WILL ADD A USER */}\r\n                <FormDialog faButton={faUserPlus} onSubmitFunction={(email: string) => addEditorFunction(email, row.id)} />\r\n              </TableCell>\r\n              {/* <TableCell align=\"right\">{row.file_size}</TableCell> */}\r\n\r\n            </TableRow>\r\n\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n",["54","55"],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\App.tsx",["56"],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\PrivateRoute.tsx",[],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Login.tsx",[],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\index.tsx",[],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\SyncingEditor.tsx",["57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Home.tsx",["75"],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Form.tsx",[],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\FormDialog.tsx",[],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\ConfirmDialog.tsx",[],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\Components.tsx",[],"F:\\Projects\\Thesis\\ThesisSystem\\Collab\\frontend\\collab-editor-ts\\src\\components\\RichText.tsx",["76","77","78","79","80","81","82","83","84","85"],"import React, { useCallback, useMemo, useState } from 'react'\r\nimport isHotkey from 'is-hotkey'\r\nimport { Editable, withReact, useSlate, Slate } from 'slate-react'\r\nimport {\r\n    Editor,\r\n    Transforms,\r\n    createEditor,\r\n    Descendant,\r\n    Node,\r\n    Element as SlateElement,\r\n    SelectionOperation,\r\n} from 'slate'\r\nimport { withHistory } from 'slate-history'\r\n\r\nimport { Button, Icon, Toolbar } from './Components'\r\nimport { SetSelectionOperation } from 'slate'\r\nimport { faBold } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst HOTKEYS = {\r\n    'mod+b': 'bold',\r\n    'mod+i': 'italic',\r\n    'mod+u': 'underline',\r\n    'mod+`': 'code',\r\n}\r\n\r\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\r\n\r\nconst RichTextExample = () => {\r\n    const text = \"<p><strong>12345</strong><em>123456789</em></p><p><strong>123</strong></p>\";\r\n    //const [value, setValue] = useState<Descendant[]>(initialValue)\r\n    const [value, setValue] = useState<Descendant[]>(parseHtml(text))\r\n    const renderElement = useCallback(props => <Element {...props} />, [])\r\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\r\n    const editor = useMemo(() => withHistory(withReact(createEditor())), [])\r\n    const [currSelection, setCurrSelection] = useState(0);\r\n\r\n    console.log(initialValue);\r\n    console.log(parseHtml(text));\r\n\r\n    function parseHtml(text: String) {\r\n        let tree:SlateElement[] = [];\r\n        // = {\r\n        //     children: [] as any,\r\n        //     type: \"paragraph\"\r\n        // }\r\n\r\n        let element:SlateElement = {\r\n            type: \"paragraph\",\r\n            children: []\r\n        }\r\n        // let element = {\r\n        //     text : \"\",\r\n        //     bold: false,\r\n        //     italic: false\r\n        // }\r\n\r\n        let span:Node = {\r\n            text:\"\"\r\n            \r\n        }\r\n\r\n        let inTagFlag = false;\r\n        let tagText = \"\";\r\n\r\n        let formats = [\"<strong>\", \"<em>\"];\r\n        for (let i = 0; i < text.length; i++) {\r\n\r\n            let character = \"\";\r\n            character += text[i];\r\n            //            element = new ArrayList<Leaf>();\r\n\r\n\r\n            if (character === \"\\\\\") {\r\n                i++;\r\n                character += text[i];\r\n            }\r\n\r\n            if (character === \"<\") {\r\n                i++;\r\n                while (text[i] !== '>') {\r\n                    character += text[i];\r\n                    i++;\r\n                }\r\n                character += text[i];\r\n\r\n                if (character === \"<p>\") {\r\n\r\n                    element = {\r\n                        type: \"paragraph\",\r\n                        children: []\r\n                    }\r\n                } else if (character === \"</p>\") {\r\n                    tree.push(element);\r\n                } else if (character === \"<strong>\") { // <strong> or <em>\r\n                    span = {\r\n                        text: \"\",\r\n                        bold: true\r\n                    }\r\n                    tagText = \"\";\r\n                    inTagFlag = true;\r\n                } else if(character===\"<em>\"){\r\n                    tagText = \"\";\r\n                    span = {\r\n                        text: \"\",\r\n                        italic: true\r\n                    }\r\n                    inTagFlag = true;\r\n                }else { // </strong> or </em>\r\n                    span.text = tagText;\r\n                    element.children.push(span);\r\n                    tagText = \"\";\r\n                }\r\n\r\n\r\n            }\r\n\r\n            \r\n            if (inTagFlag && text[i] !== '>') {\r\n                tagText += text[i];\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n        return (\r\n            <Slate editor={editor} value={value} onChange={(val) => {\r\n                setValue(val);\r\n                console.log(JSON.stringify(val));\r\n                const ops = editor.operations;/*.filter(o => {\r\n                console.log(o);\r\n                if (o) { //not undefined\r\n\r\n                    return (\r\n                        o.type === 'set_selection'\r\n                        // o.type === \"insert_text\"\r\n                    );\r\n\r\n                }\r\n\r\n                return false;\r\n            })*/\r\n                ops.forEach(el=>{\r\n                    if(el.type=='set_selection'){\r\n                        console.log(el);\r\n                    }\r\n                    \r\n                })\r\n\r\n\r\n            //    let offset = 0; // initial offset, account for <p><whatever_tag>\r\n            //     if (ops.length === 1 && ops[0].type === 'set_selection') {\r\n            //         let row = ops[0].newProperties?.anchor?.path[0] || 0;\r\n            //         let column = ops[0].newProperties?.anchor?.path[1] || 0;\r\n\r\n            //         //calculate size of previous rows\r\n            //         for (let i = 0; i < row; i++) {\r\n            //             offset += 2; // Add 2 to offset to account for <p> </p>\r\n\r\n            //             for (let j = 0; j < (val[i].children as Array<any>).length; j++) {\r\n            //                 offset += ((val[i].children as Array<any>)[j].text.length);\r\n            //                 offset += 2; //e.g. add 2 to offset to account for <span><span>\r\n            //             }\r\n            //         }\r\n\r\n            //         offset++; //Account for start of row symbol TODO: think about end of row </p>\r\n\r\n            //         //go through all the columns of current row\r\n            //         for (let i = 0; i < column; i++) {\r\n            //             offset += ((val[row].children as Array<any>)[i].text.length) + 2;\r\n            //         }\r\n\r\n            //         offset += (ops[0].newProperties?.anchor?.offset || 0) + 1;\r\n\r\n            //     }\r\n\r\n            //     console.log(offset);\r\n            //     console.log(val)\r\n                // console.log(val);\r\n            }\r\n            }>\r\n                {/* <Toolbar> */}\r\n                <MarkButton format=\"bold\" icon=\"format_bold\" />\r\n                <MarkButton format=\"italic\" icon=\"format_italic\" />\r\n                <MarkButton format=\"underline\" icon=\"format_underlined\" />\r\n                <MarkButton format=\"code\" icon=\"code\" />\r\n                <BlockButton format=\"heading-one\" icon=\"looks_one\" />\r\n                <BlockButton format=\"heading-two\" icon=\"looks_two\" />\r\n                <BlockButton format=\"block-quote\" icon=\"format_quote\" />\r\n                <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\" />\r\n                <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\" />\r\n                {/* </Toolbar> */}\r\n                <Editable\r\n                    renderElement={renderElement}\r\n                    renderLeaf={renderLeaf}\r\n                    placeholder=\"Enter some rich text…\"\r\n                    spellCheck\r\n                    autoFocus\r\n                // onKeyDown={event => {\r\n                //   for (const hotkey in HOTKEYS) {\r\n                //     if (isHotkey(hotkey, event as any)) {\r\n                //       event.preventDefault()\r\n                //       //const mark = HOTKEYS[hotkey]\r\n                //       toggleMark(editor, mark)\r\n                //     }\r\n                //   }\r\n                // }}\r\n                />\r\n            </Slate>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    const toggleBlock = (editor: any, format: any) => {\r\n        const isActive = isBlockActive(editor, format)\r\n        const isList = LIST_TYPES.includes(format)\r\n\r\n        Transforms.unwrapNodes(editor, {\r\n            match: n =>\r\n                LIST_TYPES.includes(\r\n                    (!Editor.isEditor(n) && SlateElement.isElement(n) && n.type) as string\r\n                ),\r\n            split: true,\r\n        })\r\n        const newProperties: Partial<SlateElement> = {\r\n            type: isActive ? 'paragraph' : isList ? 'list-item' : format,\r\n        }\r\n        Transforms.setNodes(editor, newProperties)\r\n\r\n        if (!isActive && isList) {\r\n            const block = { type: format, children: [] }\r\n            Transforms.wrapNodes(editor, block)\r\n        }\r\n    }\r\n\r\n    const toggleMark = (editor: any, format: any) => {\r\n        const isActive = isMarkActive(editor, format)\r\n\r\n        if (isActive) {\r\n            Editor.removeMark(editor, format)\r\n        } else {\r\n            Editor.addMark(editor, format, true)\r\n        }\r\n    }\r\n\r\n    const isBlockActive = (editor: any, format: any) => {\r\n        const [match] = Editor.nodes(editor, {\r\n            match: n =>\r\n                !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\r\n        })\r\n\r\n        return !!match\r\n    }\r\n\r\n    const isMarkActive = (editor: any, format: any) => {\r\n        const marks = Editor.marks(editor)\r\n        return marks ? marks[format] === true : false\r\n    }\r\n\r\n    const Element = ({ attributes, children, element }: any) => {\r\n        switch (element.type) {\r\n            case 'block-quote':\r\n                return <blockquote {...attributes}>{children}</blockquote>\r\n            case 'bulleted-list':\r\n                return <ul {...attributes}>{children}</ul>\r\n            case 'heading-one':\r\n                return <h1 {...attributes}>{children}</h1>\r\n            case 'heading-two':\r\n                return <h2 {...attributes}>{children}</h2>\r\n            case 'list-item':\r\n                return <li {...attributes}>{children}</li>\r\n            case 'numbered-list':\r\n                return <ol {...attributes}>{children}</ol>\r\n            default:\r\n                return <p {...attributes}>{children}</p>\r\n        }\r\n    }\r\n\r\n    const Leaf = ({ attributes, children, leaf }: any) => {\r\n        if (leaf.bold) {\r\n            children = <strong>{children}</strong>\r\n        }\r\n\r\n        if (leaf.code) {\r\n            children = <code>{children}</code>\r\n        }\r\n\r\n        if (leaf.italic) {\r\n            children = <em>{children}</em>\r\n        }\r\n\r\n        if (leaf.underline) {\r\n            children = <u>{children}</u>\r\n        }\r\n\r\n        return <span {...attributes}>{children}</span>\r\n    }\r\n\r\n    const BlockButton = ({ format, icon }: any) => {\r\n        const editor = useSlate()\r\n        return (\r\n            <Button\r\n                active={isBlockActive(editor, format)}\r\n                onMouseDown={(event: any) => {\r\n                    event.preventDefault()\r\n                    toggleBlock(editor, format)\r\n                }}\r\n            >\r\n                <Icon>{icon}</Icon>\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    const MarkButton = ({ format, icon }: any) => {\r\n        const editor = useSlate()\r\n        return (\r\n            <Button\r\n                active={isMarkActive(editor, format)}\r\n                onMouseDown={(event: any) => {\r\n                    event.preventDefault()\r\n                    toggleMark(editor, format)\r\n                }}\r\n            >\r\n                <Icon>{icon}</Icon>\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    const initialValue: SlateElement[] = [\r\n        {\r\n            type: 'paragraph',\r\n            children: [\r\n                { text: 'This is editable ' },\r\n                { text: 'rich', bold: true, italic:false },\r\n                { text: ' text, ', italic:true},\r\n            ],\r\n        },\r\n        {\r\n            type: 'paragraph',\r\n            children: [\r\n                {\r\n                    text: \"Child 2\",\r\n                }\r\n            ],\r\n        },\r\n    ]\r\n\r\n    export default RichTextExample",{"ruleId":"86","severity":1,"message":"87","line":13,"column":10,"nodeType":"88","messageId":"89","endLine":13,"endColumn":25},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"86","severity":1,"message":"94","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":25},{"ruleId":"86","severity":1,"message":"95","line":2,"column":24,"nodeType":"88","messageId":"89","endLine":2,"endColumn":43},{"ruleId":"86","severity":1,"message":"96","line":2,"column":66,"nodeType":"88","messageId":"89","endLine":2,"endColumn":75},{"ruleId":"86","severity":1,"message":"97","line":5,"column":24,"nodeType":"88","messageId":"89","endLine":5,"endColumn":31},{"ruleId":"86","severity":1,"message":"98","line":12,"column":5,"nodeType":"88","messageId":"89","endLine":12,"endColumn":15},{"ruleId":"86","severity":1,"message":"99","line":13,"column":5,"nodeType":"88","messageId":"89","endLine":13,"endColumn":15},{"ruleId":"86","severity":1,"message":"100","line":16,"column":5,"nodeType":"88","messageId":"89","endLine":16,"endColumn":23},{"ruleId":"86","severity":1,"message":"101","line":23,"column":10,"nodeType":"88","messageId":"89","endLine":23,"endColumn":17},{"ruleId":"86","severity":1,"message":"102","line":123,"column":14,"nodeType":"88","messageId":"89","endLine":123,"endColumn":31},{"ruleId":"86","severity":1,"message":"103","line":279,"column":21,"nodeType":"88","messageId":"89","endLine":279,"endColumn":27},{"ruleId":"86","severity":1,"message":"104","line":414,"column":13,"nodeType":"88","messageId":"89","endLine":414,"endColumn":16},{"ruleId":"86","severity":1,"message":"105","line":428,"column":17,"nodeType":"88","messageId":"89","endLine":428,"endColumn":24},{"ruleId":"86","severity":1,"message":"106","line":518,"column":13,"nodeType":"88","messageId":"89","endLine":518,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":526,"column":9,"nodeType":"109","messageId":"110","endLine":557,"endColumn":10},{"ruleId":"86","severity":1,"message":"111","line":529,"column":17,"nodeType":"88","messageId":"89","endLine":529,"endColumn":42},{"ruleId":"86","severity":1,"message":"112","line":550,"column":47,"nodeType":"88","messageId":"89","endLine":550,"endColumn":63},{"ruleId":"86","severity":1,"message":"113","line":560,"column":14,"nodeType":"88","messageId":"89","endLine":560,"endColumn":24},{"ruleId":"86","severity":1,"message":"114","line":643,"column":14,"nodeType":"88","messageId":"89","endLine":643,"endColumn":26},{"ruleId":"86","severity":1,"message":"115","line":735,"column":14,"nodeType":"88","messageId":"89","endLine":735,"endColumn":29},{"ruleId":"116","severity":1,"message":"117","line":14,"column":8,"nodeType":"118","endLine":14,"endColumn":10,"suggestions":"119"},{"ruleId":"86","severity":1,"message":"120","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":16},{"ruleId":"86","severity":1,"message":"100","line":11,"column":5,"nodeType":"88","messageId":"89","endLine":11,"endColumn":23},{"ruleId":"86","severity":1,"message":"97","line":15,"column":24,"nodeType":"88","messageId":"89","endLine":15,"endColumn":31},{"ruleId":"86","severity":1,"message":"121","line":16,"column":10,"nodeType":"88","messageId":"89","endLine":16,"endColumn":31},{"ruleId":"86","severity":1,"message":"122","line":17,"column":10,"nodeType":"88","messageId":"89","endLine":17,"endColumn":16},{"ruleId":"86","severity":1,"message":"123","line":19,"column":7,"nodeType":"88","messageId":"89","endLine":19,"endColumn":14},{"ruleId":"86","severity":1,"message":"124","line":35,"column":12,"nodeType":"88","messageId":"89","endLine":35,"endColumn":25},{"ruleId":"86","severity":1,"message":"125","line":35,"column":27,"nodeType":"88","messageId":"89","endLine":35,"endColumn":43},{"ruleId":"86","severity":1,"message":"126","line":65,"column":13,"nodeType":"88","messageId":"89","endLine":65,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":143,"column":31,"nodeType":"129","messageId":"130","endLine":143,"endColumn":33},"@typescript-eslint/no-unused-vars","'FontAwesomeIcon' is defined but never used.","Identifier","unusedVar","no-native-reassign",["131"],"no-negated-in-lhs",["132"],"'useState' is defined but never used.","'InsertNodeOperation' is defined but never used.","'Operation' is defined but never used.","'Toolbar' is defined but never used.","'Transforms' is defined but never used.","'Descendant' is defined but never used.","'SelectionOperation' is defined but never used.","'Console' is defined but never used.","'operationReceived' is defined but never used.","'tempOp' is assigned a value but never used.","'end' is assigned a value but never used.","'newText' is assigned a value but never used.","'text' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'tempValue' is assigned a value but never used.","'currentSelection' is assigned a value but never used.","'split_node' is defined but never used.","'createMarkup' is defined but never used.","'get_ER_IT_Style' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cookies'. Either include it or remove the dependency array.","ArrayExpression",["133"],"'isHotkey' is defined but never used.","'SetSelectionOperation' is defined but never used.","'faBold' is defined but never used.","'HOTKEYS' is assigned a value but never used.","'currSelection' is assigned a value but never used.","'setCurrSelection' is assigned a value but never used.","'formats' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},"Update the dependencies array to be: [cookies]",{"range":"136","text":"137"},[657,659],"[cookies]"]